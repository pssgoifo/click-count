name: main-worklfow

env:
  IMAGE_REPOSITORY: osgoifo/clickcount
  KUBECTL_VERSION: '1.14.10'
  KUSTOMIZE_VERSION: '3.5.4'

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

jobs:
  # Run all unit tests.
  run-tests:
    #runs-on: ubuntu-latest
    runs-on: [self-hosted, linux, X64]
    steps:
      # Check out the pull request's source code.
      - name: Check out source code
        uses: actions/checkout@v2

      - name: Show maven version
        run: mvn --version

      # Run unit tests.
      - name: Run unit tests
        run: mvn test

  # Build and release.
  build-and-release:
    #runs-on: ubuntu-latest
    runs-on: [self-hosted, linux, X64]
    needs:
      - run-tests
    steps:
      # Check out source code.
      - name: Check out source code
        uses: actions/checkout@v2

      # Build and push container image.
      # - name: Build and push container image
      #   uses: docker/build-push-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      #     repository: ${{ env.IMAGE_REPOSITORY }}
      #     tag_with_ref: true
      #     tag_with_sha: true # sha-${GITHUB_SHA::7}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.IMAGE_REPOSITORY }}:latest,${{ env.IMAGE_REPOSITORY }}:sha-${{ github.sha }}


  # Deploy to Kubernetes.
  deploy-to-staging:
    #runs-on: ubuntu-latest
    runs-on: [self-hosted, linux, X64]
    env:
      SERVICE_ACCOUNT_NAME: github-actions
      NAMESPACE: staging
    if: github.ref == 'refs/heads/develop'
    needs:
      - build-and-release
    steps:
      # Check out source code.
      - name: Check out source code
        uses: actions/checkout@v2

      # Set up kubectl.
      - name: Set up kubectl
        run: |-
          curl -sfLo kubectl https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      # Configure kubectl.
      - name: Configure kubectl
        run: echo ${{ secrets.KUBECONFIG }} | base64 --decode > kubeconfig.yml

      # Kustomize Kubernetes resources.
      - name: Kustomize Kubernetes resources
        working-directory: ./manifests
        run: |-
          kustomize edit set namespace $NAMESPACE
          kustomize edit set image REPOSITORY:TAG=${IMAGE_REPOSITORY}:sha-${GITHUB_SHA::7}

      # Deploy to Kubernetes.
      - name: Deploy to Kubernetes
        run: |-
          kubectl --kubeconfig kubeconfig.yml config get-contexts
          CLUSTER_NAME=$(kubectl --kubeconfig kubeconfig.yml config get-contexts "$(kubectl --kubeconfig kubeconfig.yml config current-context)" | awk '{print $3}' | tail -n 1)
          kubectl config use-context "${SERVICE_ACCOUNT_NAME}-${NAMESPACE}-${CLUSTER_NAME}" \
            --kubeconfig="${KUBECFG_FILE_NAME}"
          kubectl --kubeconfig kubeconfig.yml apply --kustomize manifests/

      # Validate deployment.
      - name: Validate deployment
        run: kubectl --kubeconfig kubeconfig.yml rollout status --timeout 120s deployment/clickcount-app -n $NAMESPACE

  # Deploy to Kubernetes.
  deploy-to-prod:
    #runs-on: ubuntu-latest
    runs-on: [self-hosted, linux, X64]
    if: github.ref == 'refs/heads/master'
    needs:
      - build-and-release
    steps:
      # Check out source code.
      - name: Check out source code
        uses: actions/checkout@v2

      # Set up kubectl.
      - name: Set up kubectl
        run: |-
          curl -sfLo kubectl https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      # Configure kubectl.
      - name: Configure kubectl
        run: echo ${{ secrets.KUBECONFIG }} | base64 --decode > kubeconfig.yml

      # Kustomize Kubernetes resources.
      - name: Kustomize Kubernetes resources
        working-directory: ./manifests
        run: |-
          kustomize edit set namespace prod
          kustomize edit set image REPOSITORY:TAG=${IMAGE_REPOSITORY}:sha-${GITHUB_SHA::7}

      # Deploy to Kubernetes.
      - name: Deploy to Kubernetes
        run: kubectl --kubeconfig kubeconfig.yml apply --kustomize manifests/

      # Validate deployment.
      - name: Validate deployment
        run: kubectl --kubeconfig kubeconfig.yml rollout status --timeout 120s deployment/clickcount-app -n prod
